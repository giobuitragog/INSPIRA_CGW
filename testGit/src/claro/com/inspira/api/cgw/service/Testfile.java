// 

// 

package claro.com.inspira.api.cgw.service;

import claro.com.inspira.util.Base64Util;

public class Testfile
{
    public static void main(final String[] args) throws Exception {
        final byte[] content = Base64Util.decodeFileToBase64Binary("");
        System.out.println(content.toString());
    }
}
